
USBUART_to_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f8  00800100  00800100  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aed  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000791  00000000  00000000  00000f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042e  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000280  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 3f       	cpi	r26, 0xF8	; 248
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  88:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z7sendspih>:
	sendspi(0x00);
}

void sendspi(uint8_t kommando)
{
	for (int i = 0; i < 8; i++)
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(kommando&(0x80>>i))
  94:	60 e8       	ldi	r22, 0x80	; 128
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ab 01       	movw	r20, r22
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_Z7sendspih+0x14>
  a0:	55 95       	asr	r21
  a2:	47 95       	ror	r20
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <_Z7sendspih+0x10>
  a8:	48 23       	and	r20, r24
  aa:	59 23       	and	r21, r25
  ac:	45 2b       	or	r20, r21
  ae:	11 f0       	breq	.+4      	; 0xb4 <_Z7sendspih+0x24>
			PORTB |= 1<<DATAPINNE;
  b0:	2b 9a       	sbi	0x05, 3	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <_Z7sendspih+0x26>
		else
			PORTB &= ~(1<<DATAPINNE);
  b4:	2b 98       	cbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	e7 ec       	ldi	r30, 0xC7	; 199
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z7sendspih+0x2a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z7sendspih+0x30>
  c0:	00 00       	nop
		_delay_us(50);
		PORTB |= 1<<KLOKKEPINNE;
  c2:	2d 9a       	sbi	0x05, 5	; 5
  c4:	e7 ec       	ldi	r30, 0xC7	; 199
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z7sendspih+0x38>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z7sendspih+0x3e>
  ce:	00 00       	nop
		_delay_us(50);
		PORTB &= ~(1<<KLOKKEPINNE);
  d0:	2d 98       	cbi	0x05, 5	; 5
  d2:	e7 ec       	ldi	r30, 0xC7	; 199
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z7sendspih+0x46>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z7sendspih+0x4c>
  dc:	00 00       	nop
	sendspi(0x00);
}

void sendspi(uint8_t kommando)
{
	for (int i = 0; i < 8; i++)
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 30       	cpi	r18, 0x08	; 8
  e4:	31 05       	cpc	r19, r1
  e6:	c9 f6       	brne	.-78     	; 0x9a <_Z7sendspih+0xa>
		PORTB |= 1<<KLOKKEPINNE;
		_delay_us(50);
		PORTB &= ~(1<<KLOKKEPINNE);
		_delay_us(50);
	}
	PORTB |= 1<<DATAPINNE;
  e8:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ff ef       	ldi	r31, 0xFF	; 255
  ec:	29 ef       	ldi	r18, 0xF9	; 249
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	f1 50       	subi	r31, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <_Z7sendspih+0x60>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_Z7sendspih+0x6a>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <_Z4ovonv>:
}


void ovon(void)
{
	sendspi(0x00);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('O');
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('V');
 10a:	86 e5       	ldi	r24, 0x56	; 86
 10c:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi(' ');
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('O');
 116:	8f e4       	ldi	r24, 0x4F	; 79
 118:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('N');
 11c:	8e e4       	ldi	r24, 0x4E	; 78
 11e:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
 122:	08 95       	ret

00000124 <_Z5ovoffv>:
}

void ovoff(void)
{
	sendspi(0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('O');
 12a:	8f e4       	ldi	r24, 0x4F	; 79
 12c:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('V');
 130:	86 e5       	ldi	r24, 0x56	; 86
 132:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi(' ');
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('O');
 13c:	8f e4       	ldi	r24, 0x4F	; 79
 13e:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('F');
 142:	86 e4       	ldi	r24, 0x46	; 70
 144:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi('F');
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
 14e:	08 95       	ret

00000150 <_Z8com_initv>:
#define DATADIRBIT DDB3


void com_init(void)
{
	DDRB |= (1<<KLOKKEDIRBIT) | (1<<DATADIRBIT);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	88 62       	ori	r24, 0x28	; 40
 154:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<KLOKKEPINNE) | (1<<DATAPINNE);
 156:	85 b1       	in	r24, 0x05	; 5
 158:	88 62       	ori	r24, 0x28	; 40
 15a:	85 b9       	out	0x05, r24	; 5

	sendspi(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi(0x00);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
	sendspi(0x00);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 48 00 	call	0x90	; 0x90 <_Z7sendspih>
 16e:	08 95       	ret

00000170 <_Z9uart_initv>:
//////    Blablabla... https://appelsiini.net/2011/simple-usart-with-avr-libc/
//////
//////
void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 170:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 174:	87 e6       	ldi	r24, 0x67	; 103
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= 1<<U2X0;
	#else
	UCSR0A &= ~(1<<U2X0);
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	80 83       	st	Z, r24
	#endif

	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); /* 8-bit data */
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);   /* Enable RX and TX */
 18a:	e1 ec       	ldi	r30, 0xC1	; 193
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	80 83       	st	Z, r24


	UCSR0B |= (1 << RXCIE0); // Enable the USART Recieve Complete interrupt (USART_RXC)
 192:	80 81       	ld	r24, Z
 194:	80 68       	ori	r24, 0x80	; 128
 196:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 198:	78 94       	sei
 19a:	08 95       	ret

0000019c <__vector_18>:
}

ISR(USART_RX_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	cli();
 1be:	f8 94       	cli
	serialbuffer[hode++] = UDR0;
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hode>
 1c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <hode+0x1>
 1c8:	9c 01       	movw	r18, r24
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <hode+0x1>
 1d2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <hode>
 1d6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1da:	fc 01       	movw	r30, r24
 1dc:	ec 5f       	subi	r30, 0xFC	; 252
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	20 83       	st	Z, r18
	hode = hode%BUFFERLENGDE;
 1e2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <hode>
 1e6:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <hode+0x1>
 1ea:	9a 01       	movw	r18, r20
 1ec:	36 95       	lsr	r19
 1ee:	27 95       	ror	r18
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	a5 ec       	ldi	r26, 0xC5	; 197
 1f6:	b0 e2       	ldi	r27, 0x20	; 32
 1f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
 1fc:	92 95       	swap	r25
 1fe:	82 95       	swap	r24
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	89 27       	eor	r24, r25
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	89 27       	eor	r24, r25
 208:	64 ef       	ldi	r22, 0xF4	; 244
 20a:	71 e0       	ldi	r23, 0x01	; 1
 20c:	86 9f       	mul	r24, r22
 20e:	90 01       	movw	r18, r0
 210:	87 9f       	mul	r24, r23
 212:	30 0d       	add	r19, r0
 214:	96 9f       	mul	r25, r22
 216:	30 0d       	add	r19, r0
 218:	11 24       	eor	r1, r1
 21a:	ca 01       	movw	r24, r20
 21c:	82 1b       	sub	r24, r18
 21e:	93 0b       	sbc	r25, r19
 220:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <hode+0x1>
 224:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hode>
	sei();
 228:	78 94       	sei
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <_Z5mottav>:

uint8_t motta(void) {
	uint8_t returverdi = 0xFF;
	if(hode != hale)
 24c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <hode>
 250:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <hode+0x1>
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 258:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 25c:	28 17       	cp	r18, r24
 25e:	39 07       	cpc	r19, r25
 260:	a9 f1       	breq	.+106    	; 0x2cc <_Z5mottav+0x80>
	{
		cli();
 262:	f8 94       	cli
		returverdi = serialbuffer[hale++];
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 26c:	9c 01       	movw	r18, r24
 26e:	2f 5f       	subi	r18, 0xFF	; 255
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 276:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 27a:	fc 01       	movw	r30, r24
 27c:	ec 5f       	subi	r30, 0xFC	; 252
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	40 81       	ld	r20, Z
		hale = hale%BUFFERLENGDE;
 282:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 286:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 28a:	9f 01       	movw	r18, r30
 28c:	36 95       	lsr	r19
 28e:	27 95       	ror	r18
 290:	36 95       	lsr	r19
 292:	27 95       	ror	r18
 294:	a5 ec       	ldi	r26, 0xC5	; 197
 296:	b0 e2       	ldi	r27, 0x20	; 32
 298:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__umulhisi3>
 29c:	92 95       	swap	r25
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 27       	eor	r24, r25
 2a8:	64 ef       	ldi	r22, 0xF4	; 244
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	86 9f       	mul	r24, r22
 2ae:	90 01       	movw	r18, r0
 2b0:	87 9f       	mul	r24, r23
 2b2:	30 0d       	add	r19, r0
 2b4:	96 9f       	mul	r25, r22
 2b6:	30 0d       	add	r19, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	cf 01       	movw	r24, r30
 2bc:	82 1b       	sub	r24, r18
 2be:	93 0b       	sbc	r25, r19
 2c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		sei();
 2c8:	78 94       	sei
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <_Z5mottav+0x82>
	hode = hode%BUFFERLENGDE;
	sei();
}

uint8_t motta(void) {
	uint8_t returverdi = 0xFF;
 2cc:	4f ef       	ldi	r20, 0xFF	; 255
		returverdi = serialbuffer[hale++];
		hale = hale%BUFFERLENGDE;
		sei();
	}
	return returverdi;
}
 2ce:	84 2f       	mov	r24, r20
 2d0:	08 95       	ret

000002d2 <main>:
volatile uint16_t hode = 0;
volatile uint16_t hale = 0;

int main(void)
{
	uart_init();
 2d2:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9uart_initv>
    com_init();
 2d6:	0e 94 a8 00 	call	0x150	; 0x150 <_Z8com_initv>
	
    while (1) 
    {
		uint8_t data = motta();
 2da:	0e 94 26 01 	call	0x24c	; 0x24c <_Z5mottav>
		if (data != 0xFF)
 2de:	8f 3f       	cpi	r24, 0xFF	; 255
 2e0:	e1 f3       	breq	.-8      	; 0x2da <main+0x8>
		{
			if(data == 'L')
 2e2:	8c 34       	cpi	r24, 0x4C	; 76
 2e4:	19 f4       	brne	.+6      	; 0x2ec <main+0x1a>
				{ovoff();}
 2e6:	0e 94 92 00 	call	0x124	; 0x124 <_Z5ovoffv>
 2ea:	f7 cf       	rjmp	.-18     	; 0x2da <main+0x8>
			if(data == 'D')
 2ec:	84 34       	cpi	r24, 0x44	; 68
 2ee:	a9 f7       	brne	.-22     	; 0x2da <main+0x8>
				{ovon();}
 2f0:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z4ovonv>
 2f4:	f2 cf       	rjmp	.-28     	; 0x2da <main+0x8>

000002f6 <__umulhisi3>:
 2f6:	a2 9f       	mul	r26, r18
 2f8:	b0 01       	movw	r22, r0
 2fa:	b3 9f       	mul	r27, r19
 2fc:	c0 01       	movw	r24, r0
 2fe:	a3 9f       	mul	r26, r19
 300:	70 0d       	add	r23, r0
 302:	81 1d       	adc	r24, r1
 304:	11 24       	eor	r1, r1
 306:	91 1d       	adc	r25, r1
 308:	b2 9f       	mul	r27, r18
 30a:	70 0d       	add	r23, r0
 30c:	81 1d       	adc	r24, r1
 30e:	11 24       	eor	r1, r1
 310:	91 1d       	adc	r25, r1
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
